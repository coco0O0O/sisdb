
# 配置文件说明：
# key 不能包含'.' , 否则搜索的时候会有问题
# include 空格 后跟文件名，相对当前conf的目录
# 数组和集合必须加逗号，最后一个元素不加逗号
# 所有数据都是结构化数据，作为股票默认就会建立这些表格

#------ 以下是对多市场的表格定义 -------
exch:{
  scale : none, # 首字段缩放比例 none表示不是时序数据库
  limit : 1, # 单个市场最大记录数
  insert-mode : always,  # 忽略该选项，不做判断直接增加
  update-mode : always,   # 总是修改
  fields: [
  # 字段名| 数据类型| 长度| io 放大还是缩小| 缩放比例 zoom|压缩类型|压缩参考字段索引
  [code, string, 4, 0, 0, 0, 0], # SH SZ
  [name, string, 4, 0, 0, 0, 0], # 沪 深
  [version, uint, 4, 0, 0, 0, 0],  # 版本号，当前行情的编号 同一版本号，即使发出init指令也不再初始化
  [status, int, 1, 0, 0, 0, 0], # 状态，0 初始化 1 正常运行， 2 收盘开始 3 已经收盘
  [tradedate, uint, 4, 0, 0, 0, 0], # 交易日期 当前交易的日期
  [closedate, uint, 4, 0, 0, 0, 0] # 收盘日期 已做完收盘的日期，开市期间和tradedate不一样
  ]
}

#------ 以下是对单个股票的表格定义 -------
info:{
  scale : none, # 首字段缩放比例 0 表示没有缩放比例
  limit : 1, # 单只股票最大记录数
  insert-mode : always,  # 忽略该选项，不做判断直接增加
  update-mode : always,   # 总是修改
  fields: [

  # ------ io & zoom 说明 -------
  # io = 0 输入时乘以zoom后取整，输出时除以zoom后保留的小数点个数 对float&double有效
  # 最大支持15位小数,
  # io = 1 输入时除以zoom后取整，输出时乘以zoom后取整 对int有效
  # 最大支持10^15次方,足够表示极大数
  
  # 只在json&array转struct有作用，其他时候没有用 只有uint和int，string类型，没有其他类型

  # 字段名| 数据类型| 长度| io 放大还是缩小| 缩放比例 zoom|压缩类型|压缩参考字段索引

  [name, string, 16, 0, 0, 0, 0],
  [type, int, 1, 0, 0, 0, 0],  # 股票类型
  [decimal, int, 1, 0, 0, 0, 0], # 价格小数点
  [volunit, int, 2, 0, 0, 0, 0], # 来源数据除以该值为显示值，一般表示最小交易单位
  [before, int, 4, 0, 2, local, before],
  [stophigh, int, 4, 0, 2, local, before],
  [stoplow, int, 4, 0, 2, local, before]
  ]
}

#------ 以下是对单个股票的表格定义 -------
# 接受到now的更新时，会根据字段同步修改min，tick，day，min5,day5
# 当日的tick和min都不需要修正vol和money，因为第二日自然清理了，
# 但是其他的 day5 min5 min30等历史数据就需要计算差值 
now:{
  scale : second, # 按秒增补 时序数据库，或者第一个字段，或者time字段
  limit : 1, # 单只股票最大记录数
  insert-mode : time,  # 按时间增加记录 
  update-mode : always,   # 总是修改
  links: "min,day,tick,min5,day5",
  # links: "tick",
  fields: [
  # 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 4, 0, 0, up, time],
  [open, int, 4, 0, 2, up, close],
  [high, int, 4, 0, 2, local, open],
  [low, int, 4, 0, 2, local, open],
  [close, int, 4, 0, 2, local, open],
  [vol, uint, 4, 1, 2, local, vol],    #保留4位，其实是要求特殊压缩格式，
  [money, uint, 4, 1, 2, multi, vol],  #保留4位，其实存入数据时会除10000，取出数据时会乘，针对json和array
  [buy1, int, 4, 0, 2, local, close],
  [buyv1, int, 4, 0, 0, up, buyv1],
  [sell1, int, 4, 0, 2, local, close],
  [sellv1, int, 4, 0, 0, up, sellv1],
  [buy2, int, 4, 0, 2, local, close],
  [buyv2, int, 4, 0, 0, up, buyv2],
  [sell2, int, 4, 0, 2, local, close],
  [sellv2, int, 4, 0, 0, up, sellv2],
  [buy3, int, 4, 0, 2, local, close],
  [buyv3, int, 4, 0, 0, up, buyv3],
  [sell3, int, 4, 0, 2, local, close],
  [sellv3, int, 4, 0, 0, up, sellv3],
  [buy4, int, 4, 0, 2, local, close],
  [buyv4, int, 4, 0, 0, up, buyv4],
  [sell4, int, 4, 0, 2, local, close],
  [sellv4, int, 4, 0, 0, up, sellv4],
  [buy5, int, 4, 0, 2, local, close],
  [buyv5, int, 4, 0, 0, up, buyv5],
  [sell5, int, 4, 0, 2, local, close],
  [sellv5, int, 4, 0, 0, up, sellv5]
  ]
}

min:{
  scale : index, # 按递增自然数 需要依赖tradetime，避免交易时间外的数据存在
  limit : 240, # 单只股票最大记录数 0 表示不限制
  insert-mode : time,  # 时间为新的索引就增加新的记录
  update-mode : vol,   # vol增加就修改
  fields: [
  # 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 2, 0, 0, up, time],
  [open, int, 4, 0, 2, up, close],
  [high, int, 4, 0, 2, local, open],
  [low, int, 4, 0, 2, local, open],
  [close, int, 4, 0, 2, local, open],
  [vol, uint, 4, 1, 2, up, vol],
  [money, uint, 4, 1, 2, multi, vol]
  ],
  fields-cache : {
    # 字段名| 和front比较的方法| 产生新数据的参考字段
    open: [init,close],   #init 仅仅在生成新数据时赋值 其他任何时候不变
    high: [max,close],    # 求最大值，以close为基准 第一个记录直接赋值close
    low:  [min,close],
    vol:  [incr,vol],    # 求增长的值，来源数据约定为一个交易日总量，通过这个方法可以得到某一时间段的数量
    money:[incr,money]
  }
}

tick:{
  scale : second, # 按秒增补
  limit : 120, # 单只股票最大记录数
  insert-mode : time,  # 时间为新的日期增加新的记录
  update-mode : none,  # 永远不修改，只增加
  fields: [
# 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 4, 0, 0, up, time],
  [close, int, 4, 0, 2, up, close],
  [vol, uint, 4, 1, 2, up, vol]
  ],
  fields-cache : {
    vol:  [incr,vol]
  }  
}

#-------------------------------
day:{
  scale : day, # 按天增补
  insert-mode : time,  # 时间为新的日期增加新的记录
  update-mode : vol,  # 同一天成交量大的可以修改
  fields: [
  # 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 4, 0, 0, up, time],
  [open, int, 4, 0, 2, up, close],
  [high, int, 4, 0, 2, local, open],
  [low, int, 4, 0, 2, local, open],
  [close, int, 4, 0, 2, local, open],
  [vol, uint, 4, 1, 2, local, vol],
  [money, uint, 4, 1, 2, multi, vol]
  ]
}

right:{
  scale : day, # 按天增补
  insert-mode : time,  # 时间为新的日期增加新的记录
  update-mode : always,  # always 总是修改
  fields: [
  # 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 4, 0, 0, 0, 0],
  [sgs, int, 4, 0, 0, 0, 0, 0], #送股数
  [pxs, int, 4, 0, 0, 0, 0, 0], #送现金
  [pgs, int, 4, 0, 0, 0, 0, 0],
  [pgj, int, 4, 0, 0, 0, 0, 0]
  ]
}

finance:{
  scale : month, # 按月增补
  insert-mode : time,  # 时间为新的日期增加新的记录
  update-mode : always,  # always 总是修改
  fields: [
  # 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 4, 0, 0, 0, 0],
  [ssrq, int, 4, 0, 0, 0, 0, 0],
  [zgb, int, 4, 1, 2, 0, 0, 0],
  [ltag, int, 4, 1, 2, 0, 0, 0],
  [jlr, int, 4, 0, 0, 0, 0, 0],
  [mgsy, float, 4, 0, 3, 0, 0, 0],
  [zcze, int, 4, 0, 0, 0, 0, 0],
  [mgjzc, float, 4, 0, 2, 0, 0, 0],
  [jzcsyl, float, 4, 0, 2, 0, 0, 0],
  [mggjj, float, 4, 0, 3, 0, 0, 0],  #每股公积金
  [mgxj, float, 4, 0, 3, 0, 0, 0],   #每股现金
  [yszk, int, 4, 0, 0, 0, 0, 0],
  [Xjll, int, 4, 0, 0, 0, 0, 0],
  [Ch, int, 4, 0, 0, 0, 0, 0],
  [Zysr, int, 4, 0, 0, 0, 0, 0],
  [Zylr, int, 4, 0, 0, 0, 0, 0],
  [Zylrl, int, 4, 0, 0, 0, 0, 0]
  ]
}

min5:{
  scale : min5, # 按5分钟增补
  limit : 4800, # 单只股票最大记录数
  insert-mode : time,  # 时间为新的5分钟时增加新的记录
  update-mode : vol,  # 时间为同5分钟时成交量增长
  fields: [
# 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 4, 0, 0, up, time],
  [open, int, 4, 0, 2, up, close],
  [high, int, 4, 0, 2, local, open],
  [low, int, 4, 0, 2, local, open],
  [close, int, 4, 0, 2, local, open],
  [vol, uint, 4, 1, 2, local, vol],
  [money, uint, 4, 1, 2, multi, vol]
  ],
  # 设置该标记表示会生成一个前一时间数据和当前时间数据两个备份区
  # 新入的数据，会根据前一数据求vol和money，根据当前数据设置open high low close
  fields-cache : {
    # 字段名| 和front比较的方法| 产生新数据的参考字段
    open: [init,close],
    high: [max,close],
    low:  [min,close],
    vol:  [incr,vol],
    money:[incr,money]
  }
  # 有这个字段表示当从其他数据link写入数据时，需要对数组中字段运算
}

day5:{
  scale : min1, # 按1分钟增补
  limit : 1200, # 单只股票最大记录数
  insert-mode : time,  # 时间为新的一分钟时增加新的记录
  update-mode : vol,  # 时间为同一分钟时成交量增长
  fields: [
# 字段名| 数据类型| 长度| 放大还是缩小|缩放比例|压缩类型|压缩参考字段索引
  [time, int, 4, 0, 0, up, time],
  [close, int, 4, 0, 2, up, close],
  [vol, uint, 4, 1, 2, local, vol]
  ],
  # 设置该标记表示会生成一个前一时间数据和当前时间数据两个备份区
  # 新入的数据，会根据前一数据求vol和money，根据当前数据设置open high low close
  fields-cache : {
    vol:  [incr,vol]
  }
  # 有这个字段表示当从其他数据link写入数据时，需要对数组中字段运算
}
