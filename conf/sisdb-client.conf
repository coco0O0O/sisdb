
# 配置文件说明：
# 配置时，值如果需要有',' 就必须用引号包含起来
# 查询时 key 不能包含'.' , 否则搜索的时候会有问题
# include 空格 后跟文件名，相对当前conf的目录
# 数组和集合必须加逗号，最后一个元素不加逗号

# 写日志的路径
# 根据任务名不同各自生成不同的log
log : {
  path : logs , # 目录
  level : 5,  # 级别
  maxsize : 10  #最大尺寸 单位M
}
# 该配置存放所有的服务配置 根据带参数来确定调用的服务
# 程序运行时如果不加参数，就会列出所有支持的服务
#
# 每个任务一个线程，互不影响和干涉，
# 这样做的目的仅仅就是不想多开目录，一个程序搞定所有的数据来源程序

#----------------------------------------------------#
#     以下是标准客户机的配置
#----------------------------------------------------#

workers : {
  dyna-client: {  # 实时行情转发，从上级行情服务器拿实时行情落地转发
    classname : market-dynamic-client, # 根据classname名来建立对应的类
    inputs : [
      {
        url : sdbs://level2-dynamic
        # local 系统提供统一访问共享数据的关键字接口，可以一次性获取，可以订阅，
        # 每个线程回调时都是独占的，所以要尽快处理，然后返回;
      }
    ],
    outputs: [
      {
        dbname : level2-dynamic, # 表示对外提供服务的关键字
        # 表示提供服务的名字
        url : tcp://*:8328,  # * 表示监听，等待客户发起请求
        # ://前面第一项表示输出到什么服务，后面第二项表示ip地址 再后面的冒号表示端口
        #username@password 连接我的需要匹配
        auth : ding@kuangyizhineng
        # username 和 password 只要有一个存在就设置auth为真
      }
    ]
  }, 
  market-dynamic-client: {  # 实时行情转发，从上级行情服务器拿实时行情落地转发
    classname : market-dynamic-client, # 根据classname名来建立对应的类
    argv : {
      save : 1,       # 表示对收到的数据进行流式保存
      save-path: dbs  # 程序工作目录下
      # 接收到的实时 
    },
    work-time: { # 有该字段时，表示需要定时运行
      always-work : { start:0,stop:0,delay:10 }
      # delay : 3 设置该字段表示以间隔时间来运行， 单位为秒 系统默认最小1秒
    },
    # include market-workdate.conf,
    inputs : [
      {
        dbname : level2-dynamic, # 去上一级服务请求的服务名，比如只支持level1行情请求
        # 表示提供服务的名字
        url : tcp://127.8.8.88:8328,  #  表示通过协议获取数据
        #username@password 提交给上级服务器
        auth : ding@kuangyizhineng
      }
    ],
    outputs: [
      {
        dbname : level2-dynamic, # 表示对外提供服务的关键字
        # 表示提供服务的名字
        url : redis://127.0.0.1:6379,  # * 表示监听，等待客户发起请求
        # ://前面第一项表示输出到什么服务，后面第二项表示ip地址 再后面的冒号表示端口
        #username@password 连接我的需要匹配
        auth : @clxx1110
        # username 和 password 只要有一个存在就设置auth为真
      }
    ]
  },
  # 提供历史文件服务，
  market-history-client: {  # 历史行情数据转发 根据实时行情的落地文件对外提供文件传输服务
    classname : market-history-client, # 根据classname名来建立对应的类
    work-time: { # 有该字段时，表示需要定时运行
      always-work : { start:0,stop:0,delay:10 }
      # delay : 3 设置该字段表示以间隔时间来运行， 单位为秒 系统默认最小1秒
    },
    # include market-workdate.conf,
    # 对inputs 只要有一个满足条件，就不用遍历下面的
    # outputs正好相反，需要每个服务都发送一遍
    inputs : [
      {
        workpath : dbs  # 未来可根据权限设定访问目录
      },
      {
        dbname : level2-history, # 去上一级服务请求的服务名，比如只支持level1行情请求
        # 表示提供服务的名字
        url : tcp://127.8.8.88:8329,  #  表示通过协议获取数据
        #username@password 提交给上级服务器
        auth : ding@kuangyizhineng
      }
    ]
  }
}