# 配置文件说明：
snapshot: {
  scale : second, # 有scale，默认按time索引
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time"  # 可多个字段，表示不能重复，重复即代表修改
  },
  fields: [
  # 字段名| 数据类型| 长度 | 小数位 | 数量
  [time,    second,4],  # 直接根据format的类型生成time的类型
  [cjbs,    uint,  4],  # 成交笔数
  [waskp,   price, 4],  # 加权平均委买价格
  [waskv,   uint,  4],  # 委托买入总量(单位: 手)
  [wbidp,   price, 4],  # 加权平均委卖价格
  [wbidv,   uint,  4],  # 委托卖出总量(单位: 手)
  [askp,    price, 4, 0, 10],  # 表示后面跟10个同样的字段，字段名为askp1...askp10
  [askv,    uint,  4, 0, 10],
  [bidp,    price, 4, 0, 10],
  [bidv,    uint,  4, 0, 10]
  ]
}
# 逐笔成交
order:{
  scale : msec, # 按毫秒增补
  write-method : { 
    sort : "time"
  },
  fields: [
# 字段名| 数据类型| 长度|
  [time,      msec,   8],
  [price,     price,  4],
  [vol,       volume, 4],
  [flag,      char,   1],
  [order,     uint,   4],
  [askorder,  uint,   4],
  [bidorder,  uint,   4]
  ]
}

# 买卖队列
queue:{
  scale : second, # 按秒增补
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time"
  },
  fields: [
# 字段名| 数据类型| 长度|
  [time,   second,   4],  # 每个时间点一对数据
  [askp,   price,    4],
  [asks,   uint,     1],      # 队列数量 <= 50
  [asknum, uint,     4],      # 队列实际数量 
  [askv,   uint,     4, 0, 50],  # 表示后面跟50个同样的字段，字段名为vols1...vols10
  [bidp,   price,    4],
  [bids,   uint,     1],      # 队列数量 <= 50
  [bidnum, uint,     4],      # 队列实际数量 
  [bidv,   uint,     4, 0, 50]   # 表示后面跟50个同样的字段，字段名为vols1...vols10
  ]
}

# 历史 ddx
dayddx:{
  scale : date, 
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time"
  },
  fields: [
# 字段名| 数据类型| 长度|
  [time,    date,  4],  # 每个时间点一对数据
  [asks,    uint,  2, 0, 5], 
  [askv,    uint,  4, 0, 5],     
  [askm,    uint,  4, 0, 5],           
  [bids,    uint,  2, 0, 5], 
  [bidv,    uint,  4, 0, 5],       
  [bidm,    uint,  4, 0, 5]     
  ]
}

# 实时 ddx
minddx:{
  scale : min1,
  limit : 1200,  # 单只股票最大记录数 最近5天的ddx分钟数据
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time"
  },
  fields: [
# 字段名| 数据类型| 长度|
  [time,    second,   4],  # 每个时间点一对数据
  [asks,    uint,  2, 0, 5], 
  [askv,    uint,  4, 0, 5],     
  [askm,    uint,  4, 0, 5],           
  [bids,    uint,  2, 0, 5], 
  [bidv,    uint,  4, 0, 5],       
  [bidm,    uint,  4, 0, 5]      
  ]
}