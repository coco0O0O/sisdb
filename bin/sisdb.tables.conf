
# 配置文件说明：
# 在 sisdb 系统中没有表的概念，取而代之的是字段和字段集
# 字段可以是一个，也可以是多个字段的嵌套和组合，组合后的成为字段集合

# xxx : {
#   format : none,  # 时间的IO格式，默认为空，为一般字段
#     其他可以取的值有 SECOND(4) MSEC(8) INCR(4) DATE(4) NONE(0)
  
#   scale : second,   # 时间的尺度，仅仅当format不为none时生效
#     MSEC ： INCR, MSEC, SECOND, MIN1, MIN5, HOUR, DATE, WEEK, MONTH, YEAR
#     SECOND ： INCR, SECOND, MIN1, MIN5, HOUR, DATE, WEEK, MONTH, YEAR
#     INCR ： INCR
#     DATE ： INCR, DATE, WEEK, MONTH, YEAR
  
#   limit : 1,      # 最大记录数, 默认为1，不控制记录数
#   write-method : ALWAYS,   # 新增记录的判定方法
# 总共3种方法名 ： 
# 所有有scale的数据表都默认以time为顺序，写入数据时首先要判断time的位置
# 只有当 time 比所有值都大或者等于最后的 time，才会判断 subscribe 的数据写入，小于的情况转入定位插入
# 插入数据前分两种情况  1是如果是新时间，需判断append是否成立，成立才插，不成立不插
# 如果是已经存在的时间，首先定位到这里，不成立就直接修改，

#   isinit :        # 是否做初始化，主要针对当天实时数据, 会清理掉当前证券当前字段的所有数据
#   publishs: "min,tick,day,min5,mday", # 需要扩散信息到其他的字段集合定义
#   subscribe-method : 方法名
# }

now: {
  scale : SECOND, # 有scale，默认按time索引
  limit : 1,      # 单只股票最大记录数
  isinit : 1,     # 是否每天做初始化，主要针对当天实时数据
  publishs: "min,tick,mday,min5,day", # 需要扩散信息到其他的表,对应表中需要subscribe-method定义，如果没有，默认原样拷贝，
  # publishs: "min5", # 需要扩散信息到其他的表,对应表中需要subscribe-method定义，如果没有，默认原样拷贝，
  fields: [
  # 字段名| 数据类型| 长度 |
  [time,  second,  4],  # 直接根据format的类型生成time的类型
  [open,   price,  4],
  [high,   price,  4],
  [low,    price,  4],
  [close,  price,  4],
  [vol,   volume,  4],
  [money, volume,  4],
  [askp,    price, 4, 0, 5],  # 表示后面跟10个同样的字段，字段名为askp1...askp10
  [askv,    uint,  4, 0, 5],
  [bidp,    price, 4, 0, 5],
  [bidv,    uint,  4, 0, 5]
  ]
}

# 每笔成交的明细表
tick:{
  scale : second, # 按秒增补
  limit : 1200, # 单只股票最大记录数
  isinit : 1,
  fields: [
# 字段名| 数据类型| 长度|
  [time, second,  4],
  [close, price,  4],
  [vol,  volume, 4]
  ],
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    checked : { $incr: "vol" } # 对数据合法性的检查， ,注意有订阅和无订阅的参照不同
  }
}

# 分钟线
min:{
  scale : incr,  # 按递增自然数 需要依赖tradetime，避免交易时间外的数据存在
  limit : 240, # 单只股票最大记录数 0 表示不限制
  isinit : 1,
  fields: [
  # 字段名| 数据类型| 长度|
  [time,  uint,   4],
  [open,  price,  4],
  [high,  price,  4],
  [low,   price,  4],
  [close, price,  4],
  [vol,   volume, 4],
  [money, amount, 4]
  ],
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time",  # 可多个字段，表示不能重复，重复即代表修改，以time排序
    checked : { $incr: "vol" } # 对数据合法性的检查， ,注意有订阅和无订阅的参照不同
  },
  subscribe-method : {
    # 字段名| 和front比较的方法| 产生新数据的参考字段
    open: { $once : "close"},   # once 仅仅在生成新数据时赋值 其他任何时候不变
    high: { $max : "close"},   # 求最大值，以close为基准 第一个记录直接赋值close
    low:  { $min : "close"}
  }
  # 有这个字段表示当从其他数据publish写入数据时，需要对数组中字段运算
}

#-------------盘后数据------------------
# 日线 其他周月年，和多日K线由此生成，提供数据生产接口
day:{
  scale : date,    # 按天增补
  fields: [
  # 字段名| 数据类型| 长度|
  [time,  date,   4],
  [open,  price,  4],
  [high,  price,  4],
  [low,   price,  4],
  [close, price,  4],
  [vol,   volume, 4],
  [money, amount, 4]
  ],
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time",  # 可多个字段，表示不能重复，重复即代表修改
    checked : { $nonzero: "vol" } # 对数据合法性的检查， ,注意有订阅和无订阅的参照不同
  }
}
# 先检查来源数据合法性
# 再判断字段唯一性，定位
# 最后判断前插后插还是修改
# 多日线，根据数据多寡可以显示多天的走势图
mday:{
  scale : min1, # 按1分钟增补
  limit : 1200, # 单只股票最大记录数 约5日数据
  fields: [
  # 字段名| 数据类型| 长度|
  [time,  second, 4],
  [close, price,  4],
  [vol,   volume, 4]
  ],
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time",  # 可多个字段，表示不能重复，重复即代表修改
    checked : { $incr: "vol" } # 对数据合法性的检查， ,注意有订阅和无订阅的参照不同
  },
  subscribe-method : {
    vol:  { $gap : "vol"}
  }
  # 有这个字段表示当从其他数据publish写入数据时，需要对数组中字段运算
}
# 5分钟线，其他分钟线由此生成，提供数据生产接口
min5:{
  scale : min5, # 按5分钟增补
  limit : 4800, # 单只股票最大记录数
  fields: [
  # 字段名| 数据类型| 长度|
  [time,  second, 4],
  [open,  price,  4],
  [high,  price,  4],
  [low,   price,  4],
  [close, price,  4],
  [vol,   volume, 4],
  [money, amount, 4]
  ],
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time",  # 可多个字段，表示不能重复，重复即代表修改
    checked : { $incr: "vol" } # 对数据合法性的检查， ,注意有订阅和无订阅的参照不同
  },
  subscribe-method : {
    # 字段名| 和front比较的方法| 产生新数据的参考字段
    open: { $once : "close"},   # once 仅仅在生成新数据时赋值 其他任何时候不变
    high: { $max : "close"},    # 求最大值，以close为基准 第一个记录直接赋值close
    low:  { $min : "close"},
    vol:  { $gap : "vol" },
    money:{ $gap : "money"}
  }
  # 有这个字段表示当从其他数据publish写入数据时，需要对数组中字段运算
}

# ------------------------------------------------------------------#
# 这里定义和财务相关的表格，以及其他扩展的数据表
# 此处似乎应该定义一个嵌套的树形表，还没有想好，先按结构化来处理
# 设想中应该也具备时序数据特性，但是字段却是树形结构的，集中的定义一系列字段和字段组合后，其他任何表格都可以直接引用

# 除权表
right:{
  scale : date, # 按天增补
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time"  # 可多个字段，表示不能重复，重复即代表修改
  },  
  fields: [
  # 字段名| 数据类型| 长度|
  [time, date,  4],
  [prc-factor,  int, 8],  #价格因子 10000 正代表价格跌，负代表价格涨
  [vol-factor,  int, 8],  #成交量因子 10000 正代表股份增加， 负代表股数缩减
  [bonus,       int, 4]  # 分红
  ]
}
# 如果前复权，则小于time的价格除以 abs(prc-factor)  正负号表于乘除符号
# 如果后复权，则大于等于time的价格乘以 abs(prc-factor) 

# 基本财务报表
finance:{
  scale : month, # 按月增补
  write-method : { 
    sort : "time",  # 以哪个字段进行排序，只能有一个字段
    solely : "time"  # 可多个字段，表示不能重复，重复即代表修改
  },  
  fields: [
  # 字段名 | 数据类型| 长度 |
  [time,  date, 4],   #发布日期(年月日)
  # [cycle, uint, 4],   #报表周期(年月)
  [ssrq,  uint, 4],   #上市日期(年月日)
  [zgb,   uint, 4],   #总股本(百股)
  [ltag,  uint, 4],   #流通A股(百股)
  [mgsy,  float, 4, 4],  #每股收益(元)
  [mgjzc, float, 4, 4],  #每股净资产(元) 
  [jzcsyl,float, 4, 2],  #净资产收益率(%) 
  [mggjj, float, 4, 2],  #每股公积金
  [mgwfp, float, 4, 4],  #每股未分配利润
  [mgxj,  float, 4, 4],  #每股现金
  [yysr,  int, 4],    #营业收入(万元)  
  [jlr,   int, 4],    #净利润(万元)
  [tzsy,  int, 4],    #投资收益(万元) 
  [yszk,  int, 4],    #应收账款(万元)  
  [hbzj,  int, 4],    #货币资金(万元)  -- 总现金
  [ldzj,  int, 4],    #流动资金(万元)  -- 总现金
  [sykc,  int, 4]     #剩余库存(万元) 
  ]
}