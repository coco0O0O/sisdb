
#------ 以下是对市场的定义 -------
# 做为证券专用数据库，需要一些特殊的数据库配置，并且表名必须存在，
# 数据加载和存储时都要优先处理，以保证其他数据的完整性
# 目前仅仅支持exch和info两个基本数据表，对专业版本，会进一步支持user表
# 对系统表的操作和其他表格一样，

_exch: {
  write-method : { 
    solely : "market"  # 可多个字段，表示不能重复，重复即代表修改
  },
  fields: [
  # 字段名| 数据类型| 长度|
  [country,    char, 4], # 国别 CN US 等
  [market,     char, 3], # 市场编号 SH SZ 和key值一样
  [work-time,  char, 16], # 工作时间 - [900,1530]
  [trade-time, char, 64],# 交易时间 - 暂时存储为固定长度字符串 [[],[],[]]
  [status,     uint, 1], # 状态，0 初始化 1 正常运行， 2 收盘开始 3 已经收盘
  [init-time,  uint, 4], # 版本号，初始化时生成的时间, 重新开机后，日期相同，不再初始化
  [init-date,  uint, 4], # 当前交易的日期 20180101
  [close-date, uint, 4]  # 收盘日期 开市期间比tradedate小，收市后一样
  ],
  # 有config，表示为系统表格，需要优先写入
  # 表示下面的字段需要存放到系统信息表中，如果没有用户录入数据，就使用下面配置的缺省数据
  default : {
    work-time : [900,1530], 
    # 初始化时间和收盘时间，收盘后不再接收写入信息
    # 初始化时间，到达该时间后进入初始化等待状态，等第一个不同日期的now传入时进行初始化状态，并设置状态为work
    # 如果值为 [0,0] 两个值相等 则表示24小时循环采集，0点做初始化工作，
    trade-time : [[930,1130],[1300,1500]] 
    #交易时间，画图需要用，分钟线需要用
  }
}
#------ 以下是对单个股票信息的定义 -------
# 基本不变化
_info:{
  write-method : { 
    solely : "market,code"  # 可多个字段，表示不能重复，重复即代表修改
  },
  fields: [
  # 字段名| 数据类型| 长度| 
  [market,   char,  3],
  [code,     char,  7],    # key值是market+code的组合，
  [name,     char, 16],
  [search,   char, 16],
  [type,     uint,  1],    # 股票类型  
  [dot,      uint,  1],    # 价格保留的小数点 默认为2
  #价格在数据库的二进制表示为整数，json来源数据按小数点位数乘后存入二进制表示中
  [prc-unit, uint,  4], # 价格单位，默认为1倍，留给比特币使用 最大10亿倍 
  [vol-unit, uint,  4],  
  # 默认成交量总股本和金额以百股和百元为单位，
  # 美股或其他为1股和1美元为单位，统一表示为数量的单位，必须乘以该值才是1股和1元
  [before,   price, 4]  # 前收盘  ??? 放这里很方便，但也很难受，只能等以后支持json数据表再来处理
  ],
  # 有config，表示为系统表格，需要优先写入
  # 表示下面的字段需要存放到系统信息表中，如果没有用户录入数据，就使用下面配置的缺省数据
  default : {
    dot : 2, 
    prc-unit : 1,  # 表示1倍
    vol-unit : 100   # 表示100倍
  }
}
#------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ #
# exch 和 info 是必须配置的表，且其中有几个必要字段也需要配置，才能自动进行数据转换
#------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ #
# 未来扩展用户验证时使用
# _user: {

# }

