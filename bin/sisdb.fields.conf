
# 配置文件说明：
# 在 sisdb 系统中没有表的概念，取而代之的是字段和字段集
# 字段可以是一个，也可以是多个字段的嵌套和组合，组合后的成为字段集合

# xxx : {
#   format : none,  # 时间的IO格式，默认为空，为一般字段
#     其他可以取的值有 SECOND(4) MSEC(8) INCR(4) DATE(4) NONE(0)
  
#   scale : second,   # 时间的尺度，仅仅当format不为none时生效
#     MSEC ： INCR, MSEC, SECOND, MIN1, MIN5, HOUR, DATE, WEEK, MONTH, YEAR
#     SECOND ： INCR, SECOND, MIN1, MIN5, HOUR, DATE, WEEK, MONTH, YEAR
#     INCR ： INCR
#     DATE ： INCR, DATE, WEEK, MONTH, YEAR
  
#   limit : 1,      # 最大记录数, 默认为1，不控制记录数
#   append-method : ALWAYS,   # 新增记录的判定方法
#     ALWAYS : 不判断直接增加
#     TIMEADD  : 时间尺度增加即增加记录
#     TIMEVOL : 时间尺度和成交量都增加，即增加记录
#   isinit :        # 是否做初始化，主要针对当天实时数据, 会清理掉当前证券当前字段的所有数据
#   publishs: "min,tick,day,min5,mday", # 需要扩散信息到其他的字段集合定义
#   subscribe-method : 方法名
# }

#------ 以下是对市场的定义 -------
exch: {
  fields: [
  # 字段名| 数据类型| 长度|
  [country, char, 4], # 国别 CN US 等
  [market,  char, 3], # 市场编号 SH SZ 和key值一样
  [version, int, 4], # 版本号，初始化时生成的时间, 重新开机后，日期相同，不再初始化
  [status,  uint, 1], # 状态，0 初始化 1 正常运行， 2 收盘开始 3 已经收盘
  [tradedate, uint, 4], # 当前交易的日期 20180101
  [work-time,  char, 32], # 工作时间 - 暂时存储为固定长度字符串
  [trade-time, char, 64], # 交易时间 - 暂时存储为固定长度字符串
  [closedate, uint, 4] # 收盘日期 开市期间比tradedate小，收市后一样
  ],
  # 来此表中取值的指令，如果没有key，或key中字段没有值，都可以从default中获取值
  default : {
    work-time : [900,1530], 
    # 初始化时间和收盘时间，收盘后不再接收写入信息
    # 初始化时间，到达该时间后进入初始化等待状态，等第一个不同日期的now传入时进行初始化状态，并设置状态为work
    # 如果值为 [0,0] 两个值相等 则表示24小时循环采集，0点做初始化工作，
    trade-time : [[930,1130],[1300,1500]] 
    #交易时间，画图需要用，分钟线需要用
  }
}
#------ 以下是对单个股票信息的定义 -------
info:{
  fields: [
  # 字段名| 数据类型| 长度| 
  [market, char, 3],
  [code, char, 7],    # key值是market+code的组合，
  [name, char, 16],
  [search, char, 16],
  [type, uint, 1],  # 股票类型
  [decimal, uint, 1], # 价格保留的小数点 默认为2
  #价格在数据库的二进制表示为整数，json来源数据按小数点位数乘后存入二进制表示中
  [coinunit, uint, 4], # 价格单位，默认为1，留给比特币使用 最大10亿倍 
  [volunit, uint, 4],  
  # 默认成交量总股本和金额以百股和百元为单位，
  # 美股或其他为1股和1美元为单位，统一表示为数量的单位，必须乘以该值才是1股和1元
  [before, price, 4],
  [stophigh, price, 4],
  [stoplow, price, 4]
  ],
  # 来此表中取值的指令，如果没有key，或key中字段没有值，都可以从default中获取值
  default : {
    decimal : 2, 
    coinunit : 1,
    volunit : 100,
    type : 1
  }  
}
#------ 以下是对单个股票当日扩展信息的定义 -------

#------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ #
# exch 和 info 是必须配置的表，且其中有几个必要字段也需要配置，才能自动进行数据转换
#------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ ------ #

now: {
  format : SECOND, # time字段的格式类型，系统保留关键字，不能自定义
  scale : SECOND,   
  append-method : TIMEADD, 
  limit : 1,      # 单只股票最大记录数
  isinit : 1,     # 是否每天做初始化，主要针对当天实时数据
  publishs: "min,tick,mday,min5,day", # 需要扩散信息到其他的表
  fields: [
  # 字段名| 数据类型| 长度 |
  # [time,  uint,   4],  直接根据format的类型生成time的类型
  [open,  price,  4],
  [high,  price,  4],
  [low,   price,  4],
  [close, price,  4],
  [vol,   volume, 4],
  [money, volume, 4]
  ]
}
# 当日买卖盘
mmp:{
  format : second,  # 按秒来存储，time_t格式
  scale : second,   # 按秒增补 时序数据库，或者第一个字段，或者time字段
  append-method : TIMEADD, 
  limit : 1,      # 单只股票最大记录数
  isinit : 1,     # 是否每天做初始化，主要针对当天实时数据
  fields: [
  # 字段名| 数据类型| 长度 |
  [time, uint,  4],
  [ask1, price, 4],
  [ask2, price, 4],
  [ask3, price, 4],
  [ask4, price, 4],
  [ask5, price, 4],
  [askv1, uint, 4],
  [askv2, uint, 4],
  [askv3, uint, 4],
  [askv4, uint, 4],
  [askv5, uint, 4],
  [bid1, price, 4],
  [bid2, price, 4],
  [bid3, price, 4],
  [bid4, price, 4],
  [bid5, price, 4],
  [bidv1, uint, 4],
  [bidv2, uint, 4],
  [bidv3, uint, 4],
  [bidv4, uint, 4],
  [bidv5, uint, 4]
  ]
}
# 每笔成交的明细表
tick:{
  format : second,  # 按秒来存储，time_t格式
  scale : second, # 按秒增补
  append-method : TIMEVOL, 
  limit : 1200, # 单只股票最大记录数
  isinit : 1,
  fields: [
# 字段名| 数据类型| 长度|
  [close, price,  4],
  [vol,   volume, 4]
  ]
}

# 分钟线
min:{
  format : second,  # 按秒来存储，time_t格式
  scale : incr,  # 按递增自然数 需要依赖tradetime，避免交易时间外的数据存在
  append-method : TIMEVOL, 
  limit : 240, # 单只股票最大记录数 0 表示不限制
  isinit : 1,
  fields: [
  # 字段名| 数据类型| 长度|
  # [time,  uint,   4],
  [open,  price,  4],
  [high,  price,  4],
  [low,   price,  4],
  [close, price,  4],
  [vol,   volume, 4],
  [money, amount, 4]
  ],
  subscribe-method : TO_MIN_LINE # 直接跟函数名，比较清爽
  # 有这个字段表示当从其他数据publish写入数据时，需要对数组中字段运算
}

#-------------盘后数据------------------
# 日线 其他周月年，和多日K线由此生成，提供数据生产接口
day:{
  format : date,    # 按日期来存储，20180101格式
  scale : date,    # 按天增补
  append-method : TIMEADD, 
  fields: [
  # 字段名| 数据类型| 长度|
  [open,  price,  4],
  [high,  price,  4],
  [low,   price,  4],
  [close, price,  4],
  [vol,   volume, 4],
  [money, amount, 4]
  ]
}
# 多日线，根据数据多寡可以显示多天的走势图
mday:{
  format : second,  # 按秒来存储，time_t格式
  scale : min1, # 按1分钟增补
  append-method : TIMEVOL, 
  limit : 1200, # 单只股票最大记录数 约5日数据
  fields: [
  # 字段名| 数据类型| 长度|
  [close, price,  4],
  [vol,   volume, 4]
  ],
  scribe-method : TO_TICK_LINE
  # 有这个字段表示当从其他数据publish写入数据时，需要对数组中字段运算
}
# 5分钟线，其他分钟线由此生成，提供数据生产接口
min5:{
  format : second,
  scale : min5, # 按5分钟增补
  append-method : TIMEVOL, 
  limit : 4800, # 单只股票最大记录数
  fields: [
  # 字段名| 数据类型| 长度|
  [open,  price,  4],
  [high,  price,  4],
  [low,   price,  4],
  [close, price,  4],
  [vol,   volume, 4],
  [money, amount, 4]
  ],
  subscribe-method : TO_MIN_LINE # 直接跟函数名，比较清爽
  # 有这个字段表示当从其他数据publish写入数据时，需要对数组中字段运算
}

# ------------------------------------------------------------------#
# 这里定义和财务相关的表格，以及其他扩展的数据表
# 此处似乎应该定义一个嵌套的树形表，还没有想好，先按结构化来处理
# 设想中应该也具备时序数据特性，但是字段却是树形结构的，集中的定义一系列字段和字段组合后，其他任何表格都可以直接引用

# 除权表
right:{
  format : date,
  scale : date, # 按天增补
  insert-check : "time", 
  fields: [
  # 字段名| 数据类型| 长度|
  [time, uint, 4],
  [prc-factor, float, 8, 4], #价格因子 正代表价格跌，负代表价格涨
  [vol-factor, float, 8, 4]  #成交量因子 正代表股份增加， 负代表股数缩减
  ]
}
# 如果前复权，则小于time的价格除以 abs(prc-factor)  正负号表于乘除符号
# 如果后复权，则大于等于time的价格乘以 abs(prc-factor) 

# 基本财务报表
finance:{
  format : date,
  scale : month, # 按月增补
  insert-check : "time", 
  fields: [
  # 字段名 | 数据类型| 长度 |
  # [time,  uint, 4],   #发布日期(年月日)
  [cycle, uint, 4],   #报表周期(年月)
  [ssrq,  uint, 4],   #上市日期(年月日)
  [zgb,   uint, 4],   #总股本(百股)
  [ltag,  uint, 4],   #流通A股(百股)
  [mgsy,  float, 4, 4],  #每股收益(元)
  [mgjzc, float, 4, 2],  #每股净资产(元) 
  [jzcsyl,float, 4, 2],  #净资产收益率(%) 
  [mggjj, float, 4, 2],  #每股公积金
  [mgwfp, float, 4, 4],  #每股未分配利润
  [mgxj,  float, 4, 2],  #每股现金
  [yysr,  int, 4],    #营业收入(万元)  
  [jlr,   int, 4],    #净利润(万元)
  [tzsy,  int, 4],    #投资收益(万元) 
  [yszk,  int, 4],    #应收账款(万元)  
  [hbzj,  int, 4],    #货币资金(万元) 
  [ldzj,  int, 4],    #流动资金(万元) 
  [sykc,  int, 4]     #剩余库存(万元) 
  ]
}