
# 配置文件说明：
# 配置时，值如果需要有',' 就必须用引号包含起来
# 查询时 key 不能包含'.' , 否则搜索的时候会有问题
# include 空格 后跟文件名，相对当前conf的目录
# 数组和集合必须加逗号，最后一个元素不加逗号

# 写日志的路径
# 根据任务名不同各自生成不同的log
log : {
  # screen : 1,
  path : logs , # 目录
  level : 10,  # 级别
  maxsize : 10  #最大尺寸 单位M
}
# 该配置存放所有的服务配置 根据带参数来确定调用的服务
# 程序运行时如果不加参数，就会列出所有支持的服务

# 是否加载python的脚本插件
# scripts : {
#   script-path : "../pyscript/"
# }

# 每一个key对应一个map表,map中为字段名或组合名+数据列表 可临时增加字段 存储时保存所有字段按表格压缩
workers : {
  sisdb_server : {
    level: 0,    # 0 - boot server 
    work-time: { # 有该字段时，表示需要定时运行
      # plans-work : [2355] # 日期发生变化 就根据cathc中的数据 定时切分并存储为分类数据 清理缓存 单位分钟 
      always-work : { start:1,stop:2359,delay:5000 }
      # delay : 5000   # 设置该字段表示以间隔时间来运行， 单位为毫秒 系统默认最小30毫秒
    },
    saveminute : 400, # 每天4点进行 数据清理和保存

    safe-path : "safe/",  # safe dir 

    # wlog-save: {                 # 记录每条write信息
    #   work-path : "data/wlog/",  # form this dir load data 
    #   classname: sisdb_wlog
    # },
    # fast-save : {               # 高速存储 数据存储到固态硬盘上
    #   page-size :  500,          # 1M bytes save after 
    #   safe-path: "data/safe/",  # safe dir
    #   work-path: "data/",       # sdb dir + dataset 
    #   classname: sisdb_disk     # stream data --> diskfile sdb
    # },
    # slow-save : {              # 慢速存储 主要把固态硬盘数据存储到 磁盘阵列或其他慢速介质上
    # },
    # auth : [ # 有该字段表示需要用户验证
    #   { username : guest, password : guest1234, access : "read" },  # 一般的读者
    #   { username : sisdb, password : sisdb1234, access : "write" },  # 可执行set命令
    #   { username : admin, password : admin5678, access : "admin" }    # 所有指令
    # ],
    # 数据写入无锁队列供其他人使用
    datasets : {
      # dpdb : { # 数据挖掘数据集
      #   sdbs: 
      #   {
      #     include stk.digger.conf,   # 交易数据
      #   },
      #   classname: sisdb,
      # }, 
      iodb : {
        # 先加载这里的结构 如果磁盘文件结构有冲突 以磁盘文件结构覆盖
        catch-size : 64,          # 0 表示全部保留到内存 没有该字段表示不保留 其他单位为 M
        wlog: {                 # 记录每条write信息
          work-path : "data/wlog/",  # data/wlog/iodb.log
          classname: sisdb_wlog
        },
        wfile: { # form wlog --> disk file
          page-size :  500,  # 每块的尺寸M
          work-path : "data/",   # data/iodb/*
          classname : sisdb_wsno 
        },
        rfile: { # form disk of read
          work-path : "data/",   # data/iodb/*
          classname : sisdb_rsno 
        },
        sdbs: 
        {
          include stk.inout.conf,   # 内外盘数据
        },
        classname: sdcdb
      }, 
      nowdb : {
        # 先加载这里的结构 如果磁盘文件结构有冲突 以磁盘文件结构覆盖
        wlog: {                 # 记录每条write信息
          work-path : "data/wlog/",  # data/wlog/nowdb.log
          classname: sisdb_wlog
        },
        wfile: { # form wlog --> disk file
          page-size :  500,  # 每块的尺寸M
          work-path : "data/",   # data/nowdb/*
          classname : sisdb_wsno 
        },
        rfile: { # form disk of read
          work-path : "data/",   # data/nowdb/*
          classname : sisdb_rsno 
        },
        sdbs: 
        {
          include stk.realtime.conf, # 实时数据结构 默认sno
        },
        classname: sdcdb
      }, 
      mdb : { 
        # 先加载这里的结构 如果磁盘文件结构有冲突 以磁盘文件结构覆盖
        # 内存仅仅保留当日的数据 存盘时需要合并磁盘中历史的数据 
        # 根据时间尺度保留相应数据 日线20年一个块 其他每天一个块 
        wlog: {                 # 记录每条write信息
          work-path : "data/wlog/",  # data/wlog/mdb.log
          classname: sisdb_wlog
        },
        wfile: { # form wlog --> disk file
          page-size :  500,  # 每块的尺寸M
          work-path : "data/",   # data/mdb/*
          classname : sisdb_wsdb 
        },
        rfile: { # form disk of read
          work-path : "data/",   # data/mdb/*
          classname : sisdb_rsdb 
        },
        sdbs: 
        {
          include stk.after.conf, # 默认的数据结构 盘后统计数据 
        },
        classname: sisdb,
      }
    },
    converts : {  # sisdb format converts of datasets
        nowdb.stk_snapshot : [mdb.min, mdb.day],
        nowdb.stk_snapshot : [mdb.min, mdb.day],
        classname: sisdb_convert
    },
    server : {
      protocol : ws,  # ws tcp redis     
      ip : 0.0.0.0,
      port : 7329,   
      argvs :{
        # 其他参数
      }
    }
  }
}
